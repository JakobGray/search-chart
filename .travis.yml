---
sudo: required
group: bluezone
language: generic
services:
  - docker
# Environment variables (setup endpoint to IBM github)
env:
  global:
  - OCTOKIT_API_ENDPOINT="https://github.ibm.com/api/v3/"
  - BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)

# Only build on master, stable branches and tag
# The stable branch and tag should be leading with numbers
branches:
  only:
    - master
    - /^[0-9]+\..*$/
    - /^v[0-9]+\..*$/
    - /^release-[0-9]+\..*$/

before_script:
  - make init

before_install:
  # Clone build tools & set tools path for follow on processing
  # The clone command will use the ssh key from the travis settings to clone the repo from github.ibm.com
  - make init
  - if [[ ! -z "$BRANCH_OVERRIDE" ]] ; then
      git clone -b $BRANCH_OVERRIDE git@github.ibm.com:ibmprivatecloud/content-tools;
    else
      git clone git@github.ibm.com:ibmprivatecloud/content-tools;
    fi
  - export toolsPath=`pwd`/content-tools/travis-tools/
  # Install dependencies & determine chart delta
  #- export CV_CVLINT_VERSION=v2.0.0-rc.1
  - $toolsPath/build/bin/installDependencies.sh
  - export changeList=`$toolsPath/build/bin/determineChartDelta.sh | tee determineChartDelta.out | grep 'return determineChartDelta:' | cut -f2 -d:` && cat determineChartDelta.out

install:
  # Package for release
  - if [[ ! -z "$TRAVIS_TAG" ]] ; then $toolsPath/release/bin/package.sh; fi
  # Lint and install/test charts (if cv-tests exist)
  - $toolsPath/cv-test/bin/validateContent.sh

script: echo "Override default script"
  - export BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
  - echo "TRAVIS_BRANCH=$TRAVIS_BRANCH, PR=$PR, BRANCH=$BRANCH"

env:
  matrix:
    - cluster=amd64
    # - cluster=ppc64le CV_TEST_INSTANCE_ADDR_PPC64LE=$CV_TEST_INSTANCE_ADDR_PPC64LE

deploy:
  # scp helm repo(s) to location identified (Note: SSHPASS env variable must contain password)
  - provider: script
    skip_cleanup: true
    script:  $toolsPath/build/bin/deployHelmRepo.sh
    on:
      all_branches: true
  # Publish tagged release
  - provider: releases
    skip_cleanup: true
    api_key: $GITHUB_TOKEN
    file_glob: true
    file: repo/stable/*
    on:
      tags: true

after_success:
  - test "$TRAVIS_EVENT_TYPE" != "pull_request" || echo "success"
  - |
      if [[ "$TRAVIS_EVENT_TYPE" != "pull_request" ]]; then
        python build-leader.py
        export $(cat .to_export_back)
        if [[ "$BUILD_LEADER" == "YES" ]]; then
          make release-chart
        fi
      fi
